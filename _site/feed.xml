<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel><title>游戏暂停</title><description>李家伟的博客。</description><link>http://localhost:4000</link><atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" /> <item><title>信息社会的垄断</title><description>&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/40863622/answer/341656985&quot;&gt;这篇回答&lt;/a&gt;显然无知，无知在于看不到信息社会的垄断。在信息社会，垄断是「lock in」，可以理解为绑架，你很难迁移到别的替代品上。RSS、电子邮件、互联网是开放标准，对应的客户端是商品，你可以随意迁移客户端，因此这些客户端有竞争关系，消费者终将受益。&lt;/p&gt; &lt;p&gt;如果你被「lock in」了，产品做得多屎多贵，你还是会被当韭菜割。比如游戏主机，因为买了游戏光盘，你很难迁移到别的主机平台上，不过至少游戏主机市场还是个寡头垄断（oligoplay）。像微信和脸书，根本不存在可迁移的替代品，账号封闭、内容封闭、客户端封闭，产品做得再屎你还是要买单，早日逃离才是正确的选择。&lt;/p&gt; </description><pubDate>Thu, 15 Mar 2018 19:00:00 +0000</pubDate><link>http://localhost:4000/posts/monoplay/</link><guid isPermaLink="true">http://localhost:4000/posts/monoplay/</guid> </item> <item><title>回到未来</title><description>&lt;p&gt;&lt;a href=&quot;https://www.economist.com/news/china/21737543-unhappiness-china-palpable-xi-jinping-decides-abolish-presidential-term-limits&quot;&gt;《经济学人》&lt;/a&gt;认为，任期限制取消显示了邓小平设计的「集体领导」失败。「法制」改「法治」、人民检察委员会让法院、政府和党的关系更紧合，权力分割不再存在。习想留任有三个可能原因：国家主席的身份，相比隐于幕后，在国际政治上更有分量；防止对手反击；”It is even possible that” 稳定的政局可以解决国家经济的顽疾。&lt;/p&gt; </description><pubDate>Wed, 07 Mar 2018 18:00:00 +0000</pubDate><link>http://localhost:4000/posts/term-limit/</link><guid isPermaLink="true">http://localhost:4000/posts/term-limit/</guid> </item> <item><title>流行文化</title><description>&lt;p&gt;如果一个人支持男女平权、同时 ta 还喜欢性别歧视色彩浓重的 Trap 音乐，这两者矛盾吗？我认为不矛盾，类似例子还有不认同同性恋的腐女、权利被践踏却仍然高举民族主义大旗的爱国者。&lt;/p&gt; &lt;p&gt;既然一个人不会有非黑即白的价值观，那到底是什么在影响着我们？我认为流行文化可能扮演重要角色（亦或者说是意识形态），影响我们的也许不是一段逻辑自洽合理的辩论，而是流行文化。现在想来，《摩登家庭》、《Where the Bears Are》对我的性取向认同的影响可能远大于李银河的《同性恋亚文化》，我对于约会的看法和《老友记》如出一辙，摇滚音乐对于我的自由派观点的塑造应该比《南方周末》大一点。再往回看，《法国大革命前的畅销禁书》讲的也是流行文化。&lt;/p&gt; &lt;p&gt;把男女平权、LGBT 平权、Trap 音乐、腐文化、民族主义、民主运动当成流行文化来理解，它们都是你愿意效忠跟随一生的北伦敦球队，此时此刻，loyalty 大于一切。&lt;/p&gt; </description><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><link>http://localhost:4000/posts/pop-culture/</link><guid isPermaLink="true">http://localhost:4000/posts/pop-culture/</guid> </item> <item><title>后现代性</title><description>&lt;p&gt;今天心血来潮研究了一下后现代性。如果我没搞错的话，后现代是理性主义的对立面，起源于康德的纯粹理性批判，即我们的理性限于经验。之后有福柯，他认为癫狂不应该被医院（权力）压迫。癫狂本应该是一种自然状态，然而权力用知识（理性）合理化其压迫。在当今这就是生育政策、同性恋、网瘾和知识的关系。&lt;/p&gt; &lt;p&gt;福柯认为知识和权力是硬币的两面，具有知识的人掌握了权力（你的医生、老师、议员、上司），而权力又让他们可以定义知识，什么是对的、什么错的，权力创造了监视，你的父母、老师、政府、摄像头、大数据、人工智能，即便他们不在场，只要你「以为」监视存在，权力的目的就达到了，因此你被权力规训，也因此根本没有「自由主义」。&lt;/p&gt; &lt;p&gt;虽然我是社会学和哲学的门外汉，但福柯的思想让我很受启发。比如计划生育，支持方认为计划生育是为了国家富强家庭和睦，因为深奥的理论和模型告诉我们，计划生育刻不容缓。再比如征税，同样是政府用知识合理化暴力征税，我个人觉得最讽刺的是烟草税，烟草税为什么高？根本不是政府做好事让你少吸烟，而是吸烟作为成瘾物，价格再高，吸烟者还是会买，政府可以从中获得大量税收而不损失名声，当然啦，政府会用吸烟有害健康为自己背书，福利经济学把这合理化为不影响社会整体福利，知识合理化了权力。&lt;/p&gt; &lt;p&gt;福柯是法国人，啊，看看巴黎混乱的街头以及我在巴黎被抢的钱包，法国人能有如此感性的思想真的毫不奇怪。粗浅地看，我认为后现代性是我们认识世界的一种方式，我们不可能放弃理性和逻辑，但后现代性是对理性至上态度的警告。不负责任地说，正因为我们逻辑的不自洽和不理性，才让这个社会充满「乐趣」。&lt;/p&gt; </description><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><link>http://localhost:4000/posts/post-modern/</link><guid isPermaLink="true">http://localhost:4000/posts/post-modern/</guid> </item> <item><title>拖延症的任务管理</title><description>&lt;p&gt;作为重度拖延症患者，我对于任务管理有极大的阴影：如果一件事情被计划，那就永远不可能做。后来看了些认知心理学的资料，里面提到计划造成了压力让人拖延，应该把任务视为过程而不是结果，比如「查找论文资料」就是个结果，但「花 1 小时搜集论文资料」就是过程… 后者给你的压力更小所以更容易完成。我看完觉得很有道理‬，然后用番茄钟 pomotodo 做计划，有用是有用，但也造成了干扰。每次定计划都要计算要做几个番茄钟，通常预估得偏差很大，更重要的是番茄钟经常在我思如泉涌的时候打断我。&lt;/p&gt; &lt;p&gt;番茄钟适合没意思的事情或者注意力严重缺陷的人，因为你只需要熬过 25 分钟不会造成太大负担，这 25 分钟还让你把事情做完了。&lt;/p&gt; &lt;p&gt;我的大部分任务都不是上述两种情况之一。对于无聊的事情：我的字典里不存在「忍耐做无聊的事情」，无聊的事情，比如复习功课，干嘛要做？目前碰到的最大困难就是申请签证了，每次都是最后一天死线递签。有些事情即便看起来很无聊，我也可以让它变得有意思，比如复习功课，我喜欢从零开始写笔记或者从研究一个问题开始，类似费曼学习法，但是用写的。我注意力通常不错，除了欧洲旅游回来的那段时间找不到状态，大部分情况还好。&lt;/p&gt; &lt;p&gt;我这几天逐渐摸索出新的任务管理方式，就是依旧老样子做计划，但任务只要&lt;strong&gt;开始&lt;/strong&gt;做，不管是做了 5 分钟还是 5 小时，只要开始做了就可以打勾，一是不会有什么压力，不会拖延，另一个好处是把时间用在我真正能集中精力的地方。&lt;/p&gt; &lt;p&gt;如果传统任务管理是计划经济，这种管理方式就是市场经济了吧！😆&lt;/p&gt; </description><pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate><link>http://localhost:4000/posts/time-management/</link><guid isPermaLink="true">http://localhost:4000/posts/time-management/</guid> </item> <item><title>数字驯服机器</title><description>&lt;p&gt;经济增长当然是好的，但经济增长这个概念太容易被操控。统计局跟你讲中国本季度 GDP 增长 7.1%，有什么意义呢？如果经济增长只惠及精英，然后精英们跟你讲我们的 GDP 世界第二唉，有什么意义呢？不过是民族主义的又一个驯服工具罢了。&lt;/p&gt; </description><pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate><link>http://localhost:4000/posts/growth/</link><guid isPermaLink="true">http://localhost:4000/posts/growth/</guid> </item> <item><title>MIT 计算机科学导论结课小结</title><description>&lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#python-抽象分解&quot; id=&quot;markdown-toc-python-抽象分解&quot;&gt;Python 抽象分解&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#对象和类型&quot; id=&quot;markdown-toc-对象和类型&quot;&gt;对象和类型&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#变量&quot; id=&quot;markdown-toc-变量&quot;&gt;变量&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#数据结构&quot; id=&quot;markdown-toc-数据结构&quot;&gt;数据结构&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#函数&quot; id=&quot;markdown-toc-函数&quot;&gt;函数&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#生成器&quot; id=&quot;markdown-toc-生成器&quot;&gt;生成器&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#类&quot; id=&quot;markdown-toc-类&quot;&gt;类&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#递归&quot; id=&quot;markdown-toc-递归&quot;&gt;递归&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#错误处理&quot; id=&quot;markdown-toc-错误处理&quot;&gt;错误处理&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#算法&quot; id=&quot;markdown-toc-算法&quot;&gt;算法&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;今天完成了 MITx: 6.00.1x Introduction to Computer Science and Programming Using Python，是这个暑假「完成」的第一门 MOOC，给「完成」加了引号，是因为是跳过了 Problem Set，我当然知道练习很重要，但对于基础的 Python 编程作业实在上不了心，用时30小时，11天，中间有几天偷懒，有两天做 BearCity 3 的中文字幕，所以说，这个速度我可相当满意了。&lt;/p&gt; &lt;p&gt;上这门课的原因也很简单，我意识到对 Python 的理解有短板，为什么要 OOP？Python 中 method 和 function 有何区别？怎么写？上完课后，这些问题也得到了解答。&lt;/p&gt; &lt;p&gt;课程我给 4.5/5，课程内容、视频制作剪辑、课后资料都完美，每一段视频的时间很短，10分钟左右，并且都配有课后练习。最不满的就是 edX 的证书有时间规定的，我上课的时候已经不能领证书，也就作罢。&lt;/p&gt; &lt;p&gt;回想起今年寒假，我看了几节生成器（generator）和递归的内容，看得头晕目眩眼花缭乱，这次老老实实从头开始上，很顺利地掌握了。我可以清晰地看到自己在 11 天里的进步，因此我也推荐给任何有一定基础的初学者。&lt;/p&gt; &lt;p&gt;为什么说要有一定基础？因为我大一的时候上过几节，讲得太过深入，什么是机器？什么是算法？图灵机解决的可计算性问题是什么？听不懂，因为这门课不仅教你编程，还教你什么是计算思维（computational thinking）。这门课也很「枯燥」，他假定了你对计算机足够有兴趣了。如果把这门课和 CS50 比，就是天差地别：CS50 讲课注重趣味性，然后你发现老师满头大汗讲了一个半小时就为了演示编码的意义；6.00.1x 讲究知识面和思维训练，把每个坑和用法演示得清清楚楚，还有海量的作业让你慢慢领悟。我写的 &lt;a href=&quot;http://lijiawei.cc/2017/07/24/float/&quot;&gt;十进制与二进制：为什么浮点数不准？&lt;/a&gt; 就是从 6.00.1x 里学来的，6.00.1x 用10分钟的视频讲完了原理和演示，CS 50 花了半个小时。&lt;/p&gt; &lt;p&gt;这门课的核心是计算思维，计算思维听起来很玄乎，但就是程序员最擅长的那一套：抽象分解、自动化、算法。把一个大问题层层剥离，选择合适的算法，编写合适的程序，逐个击破，最终解决问题。我把这门课的内容分成 Python 抽象分解、递归、错误处理、算法这四个部分，随便聊聊。&lt;/p&gt; &lt;h2 id=&quot;python-抽象分解&quot;&gt;Python 抽象分解&lt;/h2&gt; &lt;h3 id=&quot;对象和类型&quot;&gt;对象和类型&lt;/h3&gt; &lt;p&gt;Everything in Python is an object. 所有能被程序操作的东西，都叫对象。每个对象都有一个类型（type），类型决定了这个对象可以做什么，Python 中的类型包括 int、float、string、list 等等。&lt;/p&gt; &lt;h3 id=&quot;变量&quot;&gt;变量&lt;/h3&gt; &lt;p&gt;变量是最简单的抽象，用变量名指代一个变量，你就不用管这个变量怎么实现的。&lt;/p&gt; &lt;h3 id=&quot;数据结构&quot;&gt;数据结构&lt;/h3&gt; &lt;p&gt;把数据比作水，数据结构就是杯子，我们需要不同的数据结构来装数据。Python 中的数据结构包括 tuple、list、dictionary。这里比较 tricky 的部分是 list 和 dictionary 是可变的，当我们让多个变量指向同一个 list 或者 dictionary 的时候，任何一个变量变化，其他变量也会变化。演示如下：&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;a = [1, 2, 4] b = a a[0] = 0 print(b) # [0, 2, 4] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;所以，在复制 list 或者 dictionary 的时，务必使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;b = a[:]&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;c = aDict.copy()&lt;/code&gt;。&lt;/p&gt; &lt;h3 id=&quot;函数&quot;&gt;函数&lt;/h3&gt; &lt;p&gt;函数把一系列动作抽象，这样就不用老是复制同样的代码，把这一系列动作抽象，我不需要关心代码如何实现，以后只要用这个函数就可以了。值得一提的是，在 Python 中，函数也是个对象，你可以把函数名作为参数传递到另一个函数里。演示如下：&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;def sampleF(x): return x ** 2 def Y(f, a): return f(a) aInt = 9 Y(sampleF, aInt) &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;生成器&quot;&gt;生成器&lt;/h3&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt; 就是个生成器，当我们用 &lt;code class=&quot;highlighter-rouge&quot;&gt;for i in range(1000)&lt;/code&gt; 的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt; 不是一下子就生成了1000个整数，而是每次要用到的时候，生成1个整数，下次用到的时候，再生成一个，以节省内存开支。&lt;/p&gt; &lt;p&gt;把函数里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 换成 &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; 即可创造一个生成器。&lt;/p&gt; &lt;h3 id=&quot;类&quot;&gt;类&lt;/h3&gt; &lt;p&gt;如果我们需要抽象一套新的数据结构（你也可以理解为定义新的类型），就需要用到类（class）。类定义了这个数据结构里有哪些 attribute，有哪些 method，怎么 print，怎么加减乘除，怎么比较大小。类可以继承，把父类的 attribute 和 method 继承的子类里。&lt;/p&gt; &lt;h2 id=&quot;递归&quot;&gt;递归&lt;/h2&gt; &lt;p&gt;递归把一个大问题分解成一个小问题，把小问题解决，就把大问题解决了，一个例子就是&lt;a href=&quot;http://lijiawei.cc/2017/07/25/hanoi/&quot;&gt;汉诺塔问题&lt;/a&gt;。递归的理论基础是数学归纳法，如果函数在 n 的条件下成立可以推导出在 n+1 的条件下也成立，这时候只要证明 n = 1 时函数成立，就能证明 n &amp;gt; 1 的情况下也成立。归纳法是个在数学证明里非常有用的方法，这里不展开了。&lt;/p&gt; &lt;h2 id=&quot;错误处理&quot;&gt;错误处理&lt;/h2&gt; &lt;p&gt;有时候程序会出错，这里有两个思路：一个是如果出错了，那我执行这么一段代码，也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;try: except: else: finally: &lt;/code&gt;；另一个思路是如果出错了，就报错，有两个方法 &lt;code class=&quot;highlighter-rouge&quot;&gt;raise&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt;。&lt;/p&gt; &lt;h2 id=&quot;算法&quot;&gt;算法&lt;/h2&gt; &lt;p&gt;算法就是给计算机解决问题的一套指令，这里我想说一下怎么比较算法的好坏。计算机理论用大 O 记号表示算法的复杂度，即算法在最坏情况下所需操作步数随输入增长的情况，如果是线性增长，则为 O(n)，如果是 log 增长，例如二分法，就计为 O(log n)。&lt;/p&gt; </description><pubDate>Wed, 02 Aug 2017 15:10:00 +0100</pubDate><link>http://localhost:4000/posts/mitx6001/</link><guid isPermaLink="true">http://localhost:4000/posts/mitx6001/</guid> </item> <item><title>Docker + TensorFlow 入门</title><description>&lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#镜像和容器&quot; id=&quot;markdown-toc-镜像和容器&quot;&gt;镜像和容器&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#上手&quot; id=&quot;markdown-toc-上手&quot;&gt;上手&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#homebrew-安装-docker&quot; id=&quot;markdown-toc-homebrew-安装-docker&quot;&gt;Homebrew 安装 Docker&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#docker-加速器设置&quot; id=&quot;markdown-toc-docker-加速器设置&quot;&gt;Docker 加速器设置&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#tensorflow-镜像安装&quot; id=&quot;markdown-toc-tensorflow-镜像安装&quot;&gt;TensorFlow 镜像安装&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#docker-关键命令&quot; id=&quot;markdown-toc-docker-关键命令&quot;&gt;Docker 关键命令&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#让容器与本机的文件夹同步&quot; id=&quot;markdown-toc-让容器与本机的文件夹同步&quot;&gt;让容器与本机的文件夹同步&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#jupyter-notebook-主题更改&quot; id=&quot;markdown-toc-jupyter-notebook-主题更改&quot;&gt;Jupyter Notebook 主题更改&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Docker 是个非常轻量级的虚拟机，可以保证环境不影响代码的运行。&lt;/p&gt; &lt;p&gt;TensorFlow 官方在 Docker 上有镜像，可以直接下载。这几天研究了一点 Docker，感觉只看懂了一小角，也不知道对不对，就斗胆先写一些了。&lt;/p&gt; &lt;h2 id=&quot;镜像和容器&quot;&gt;镜像和容器&lt;/h2&gt; &lt;p&gt;Docker Hub 上可以得到各种来源的镜像，这个镜像就像以前装系统的光盘或者 .iso，装载了这个系统最初始的状态。&lt;/p&gt; &lt;p&gt;Docker 可以帮助我们把这个镜像安装，变成我们可以使用的容器，在这个容器里随便折腾，折腾完了可以删掉，再从镜像新建一个新容器，这样可以保证以前的折腾不会影响现在的代码，队友的环境也可以和自己保持一致。&lt;/p&gt; &lt;h2 id=&quot;上手&quot;&gt;上手&lt;/h2&gt; &lt;p&gt;本文以 Mac 为例，介绍如何上手 Docker。&lt;/p&gt; &lt;h3 id=&quot;homebrew-安装-docker&quot;&gt;Homebrew 安装 Docker&lt;/h3&gt; &lt;p&gt;如果有 homebrew，直接运行代码 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask install docker&lt;/code&gt; 即可安装 Docker，启动 Docker 后，Menu Bar 上会出现一只鲸鱼，也不是很明白鲸鱼和虚拟机有什么关系。&lt;/p&gt; &lt;h3 id=&quot;docker-加速器设置&quot;&gt;Docker 加速器设置&lt;/h3&gt; &lt;p&gt;因为国内的垃圾网络，最好装加速器来减少下载镜像的等待时间，我用了号称永久免费的 &lt;a href=&quot;https://www.daocloud.io/&quot;&gt;DaoCloud&lt;/a&gt;，在得到镜像地址后，在 Docker 中如图所示设置。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://lijiawei.cc/images/屏幕快照 2017-03-05 下午2.57.26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;tensorflow-镜像安装&quot;&gt;TensorFlow 镜像安装&lt;/h3&gt; &lt;p&gt;启动 Docker，然后终端运行以下命令，即可从 Docker Hub 上下载 TensorFlow 镜像。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it -p 8888:8888 tensorflow/tensorflow &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;如果你想要和你的容器共享文件，那么最好用这个命令：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it -p 8888:8888 -v ~/pathe/to/folder/you/wannna/share:/portal tensorflow/tensorflow &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;从你的容器访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;/portal&lt;/code&gt; 文件夹，就是你电脑上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/pathe/to/folder/you/wannna/share&lt;/code&gt; 文件夹。&lt;code class=&quot;highlighter-rouge&quot;&gt;/portal&lt;/code&gt; 这个名字可以随便改，不过我觉得叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;/portal&lt;/code&gt; 还蛮酷的。&lt;/p&gt; &lt;p&gt;如果一切顺利的话，你就可以打开终端的链接，从浏览器访问 Jupyter Notebook 了。&lt;/p&gt; &lt;h3 id=&quot;docker-关键命令&quot;&gt;Docker 关键命令&lt;/h3&gt; &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; 查看装了哪些镜像：&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://lijiawei.cc/images/屏幕快照 2017-03-05 下午3.05.15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rmi &amp;lt;image name or tag or ID whatever&amp;gt;&lt;/code&gt; 可以删除镜像。&lt;/p&gt; &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; 查看正在运行的容器（图中没有正在运行的容器）：&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://lijiawei.cc/images/屏幕快照 2017-03-05 下午3.07.15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt; 查看所有的容器：&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://lijiawei.cc/images/屏幕快照 2017-03-05 下午3.08.37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm &amp;lt;container name or tag or ID whatever&amp;gt;&lt;/code&gt; 可以删除容器。&lt;/p&gt; &lt;p&gt;如果觉得一个一个删太烦，运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm $(docker ps -a -q)&lt;/code&gt;删除所有容器。&lt;/p&gt; &lt;p&gt;若要停止容器（比如端口被占），运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stop &amp;lt;container name or tag or ID whatever&amp;gt;&lt;/code&gt;。启动容器运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker start &amp;lt;container name or tag or ID whatever&amp;gt;&lt;/code&gt;。&lt;/p&gt; &lt;p&gt;好的，现在到关键部分了！当我创建了一个 TensorFlow 容器后，我该怎么开始运行 Jupyter Notebook 呢？运行&lt;code class=&quot;highlighter-rouge&quot;&gt;docker start -i &amp;lt;container name or tag or ID whatever&amp;gt;&lt;/code&gt; 就可以了！&lt;/p&gt; &lt;p&gt;在 notebook 里测试一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;/portal&lt;/code&gt; 是否正常，可以运行：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!ls /portal/ &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;如果你和一样用的是 oh-my-zsh，你可以在 zshconfig 里加上这两个 alias 方便以后使用：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 新建容器并从 /portal 传输文件 alias tfdocker=&quot;docker run -it -p 8888:8888 -v ~/Coding/DeepLearning101:/portal tensorflow/tensorflow&quot; # 启动 ID 为 a4032edb39cb 的容器并开启 Jupyter Notebook alias startdocker=&quot;docker start -i a4032edb39cb&quot; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h1 id=&quot;让容器与本机的文件夹同步&quot;&gt;让容器与本机的文件夹同步&lt;/h1&gt; &lt;p&gt;参考&lt;a href=&quot;https://github.com/junjielizero/DeepLearning101/blob/master/ch0/note/README.md&quot;&gt;junjielizero 的笔记&lt;/a&gt;，运行下列命令，可以创建于本机文件夹同步的笔记。&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it -p 8888:8888 -v ~/Coding/DeepLearning101:/Coding/DeepLearning101 -w /Coding/DeepLearning101 tensorflow/tensorflow &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;jupyter-notebook-主题更改&quot;&gt;Jupyter Notebook 主题更改&lt;/h2&gt; &lt;p&gt;用了新编辑器怎么可以不换主题，在 Jupyter Notebook 中，以感叹号开头运行命令就是终端指令。在 notebook 中运行：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!pip install --upgrade jupyterthemes &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;如果一切顺利（在中国的垃圾网络下怎么可能顺利，你可能要多试几次），你就可以参考&lt;a href=&quot;https://github.com/dunovank/jupyter-themes&quot;&gt;GitHub - dunovank/jupyter-themes 文档&lt;/a&gt; 做主题调整了。我输入的命令是：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 用 solarized-light 主题，代码字体是 inputmono，字号 12 点，界面字体 sourcesans，输出字体 sourcesans，开启工具栏，开启标题栏 !jt -t solarized-light -f inputmono -fs 12 -nf sourcesans -tf sourcesans -T -N &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;结果如图：&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tKfTcgy1fdc04dobmyj30se0oyaec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; </description><pubDate>Sun, 05 Mar 2017 15:32:00 +0000</pubDate><link>http://localhost:4000/posts/Docker-TensorFlow/</link><guid isPermaLink="true">http://localhost:4000/posts/Docker-TensorFlow/</guid> </item> <item><title>用树莓派实现 HomeKit 控制台灯</title><description>&lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#配置树莓派&quot; id=&quot;markdown-toc-配置树莓派&quot;&gt;配置树莓派&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#更换国内镜像源&quot; id=&quot;markdown-toc-更换国内镜像源&quot;&gt;更换国内镜像源&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#安装-nodejs-及相关依赖&quot; id=&quot;markdown-toc-安装-nodejs-及相关依赖&quot;&gt;安装 Node.js 及相关依赖&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#安装-homebridge-及相关依赖&quot; id=&quot;markdown-toc-安装-homebridge-及相关依赖&quot;&gt;安装 homebridge 及相关依赖&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#安装-homebridge-yeelight&quot; id=&quot;markdown-toc-安装-homebridge-yeelight&quot;&gt;安装 homebridge-yeelight&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#开机启动&quot; id=&quot;markdown-toc-开机启动&quot;&gt;开机启动&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;在看到少数派上的 &lt;a href=&quot;http://sspai.com/36617&quot;&gt;借助树莓派与 HomeBridge ，将 YeeLight 彩光灯接入 Apple HomeKit&lt;/a&gt; 一文后, 非常心动. 在暑假的时候关注过一阵子 yeelight, 那时实现的功能非常有限还不支持 IFTTT 就作罢没有买, 但到了12月后, yeelight 既有 IFTTT 又能玩 homekit, 于是立马下单了树莓派 3 和 yeelight.&lt;/p&gt; &lt;p&gt;树莓派可以理解为一台微型电脑 (开发板), 运行的是树莓派定制的 Rapbian, 虽然树莓派并不是性能最强也不是最有性价比的开发板, 但它的社区支持是最友好的 (毕竟面向的人群还包括儿童), 它出的杂志 MagPi 极度令人沉迷 (甚至能让我回忆起从前看大众软件的时光), 官方的教程和文档对新手非常友好 (只需要一点点英语基础就够), 作为对比让我们斜眼一下 &lt;a href=&quot;https://developer.qualcomm.com/hardware/dragonboard-410c/tutorial-videos&quot;&gt;DragonBoard 410c&lt;/a&gt;, 任何出现的问题只要 Google 一下 Raspberry Pi + 关键词都能找到, 其配套的硬件软件也很出色, 例如 sense hat 可以直接配合自带的 sense hat emulator. 因此非常推荐任何对编程感兴趣的人入手.&lt;/p&gt; &lt;p&gt;本文用到的硬件如下:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;宜家 E27 螺孔台灯 RMB 99&lt;/li&gt; &lt;li&gt;yeelight 彩光版 RMB 89&lt;/li&gt; &lt;li&gt;树莓派 3 Model B (同时配了外壳和散热片) RMB 206&lt;/li&gt; &lt;li&gt;预先烧录好 NOOBS 的 Micro SD 卡&lt;/li&gt; &lt;li&gt;网线&lt;/li&gt; &lt;li&gt;有线鼠标&lt;/li&gt; &lt;li&gt;戴尔显示器&lt;/li&gt; &lt;li&gt;Macbook Pro&lt;/li&gt; &lt;li&gt;iPhone&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;配置树莓派&quot;&gt;配置树莓派&lt;/h2&gt; &lt;p&gt;参考官方指南 &lt;a href=&quot;https://www.raspberrypi.org/learning/software-guide/&quot;&gt;Raspberry Pi Software Guide&lt;/a&gt; 烧录 Micro SD 卡. 把下载好的 &lt;a href=&quot;https://www.raspberrypi.org/downloads/noobs/&quot;&gt;NOOBS for Raspberry Pi&lt;/a&gt; 解压缩然后拷到 SD 卡上. 当然, 也可以直接烧录 Raspbian 到 SD 卡, 这样就不用忍受 NOOBS 安装的漫长时间, 直接插卡就能开机.&lt;/p&gt; &lt;p&gt;插入有线鼠标 (带 USB 发射埠的无线鼠标也可以, 凑活用就好, 之后可以在 Macbook 上使用 SSH 操作), Micro SD 卡, HDMI 线, 网线, Micro USB 电源, 然后就可以安装 Raspbian, 安装完毕后就能进入系统.&lt;/p&gt; &lt;p&gt;进入系统后, 点击左上角 Preferences - Raspberry Pi Configuration, 打开 SSH 和 VNC. 建议在这里顺便更改用户密码.&lt;/p&gt; &lt;p&gt;这时候就可以切回 Macbook, 打开终端 (我使用的是 iTerm2), 输入代码 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh pi@raspberrypi.local&lt;/code&gt; 然后输入树莓派的密码, 连接树莓派.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gw1fbg76r9rl7j30oa0g1mzm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;更具体的操作方法, 请参考官方帮助页面 &lt;a href=&quot;https://www.raspberrypi.org/learning/software-guide/&quot;&gt;Raspberry Pi Software Guide&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;更换国内镜像源&quot;&gt;更换国内镜像源&lt;/h2&gt; &lt;p&gt;由于国内访问树莓派服务器的不便, 因此需要更换为国内镜像, 这里我将 sources 的镜像更换为速度更快的阿里云, archive.raspberrypi.org 的镜像只找到中科大的, 因此使用了中科大的镜像.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/apt/sources.list # 用 # 注释掉原有的 source, 输入阿里云镜像. deb http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib deb-src http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gw1fbg76t6uh7j30oa0g142p.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;更换中科大镜像的方法一样, 但文件位置及名字不同.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/apt/sources.list.d/raspi.list # 注释掉原来的, 输入中科大镜像 deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ jessie main ui &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gw1fbg76rmtg6j30oa0g1jtv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;更换好源后, 输入以下代码就可以不用忍受龟速更新系统了.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update sudo apt-get upgrade &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;安装-nodejs-及相关依赖&quot;&gt;安装 Node.js 及相关依赖&lt;/h2&gt; &lt;p&gt;Homebridge 是一个用 node.js 开发的 HomeKit 服务器, 因此需要参考 &lt;a href=&quot;https://github.com/nfarina/homebridge/wiki/Running-HomeBridge-on-a-Raspberry-Pi&quot;&gt;Running HomeBridge on a Raspberry Pi&lt;/a&gt; 在树莓派上先安装 node.js, 由于国内网络问题, 仍然需要更换镜像.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash - # 更换为国内源 sudo nano /etc/apt/sources.list.d/nodesource.list # 输入清华大学镜像 deb http://mirrors.tuna.tsinghua.edu.cn/nodesource/deb/ jessie main deb-src http://mirrors.tuna.tsinghua.edu.cn/nodesource/deb/ jessie main &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;这时候就可以安装 node.js 以及其相关依赖了.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y nodejs sudo apt-get install libavahi-compat-libdnssd-dev &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;安装-homebridge-及相关依赖&quot;&gt;安装 homebridge 及相关依赖&lt;/h2&gt; &lt;p&gt;Homebridge 属于 node.js 下的模块之一, 这时候需要用到 npm 安装, npm 的速度也是很令人着急, 但好在 npm 可以使用代理, 这里我们使用淘宝镜像下载 homebridge. 本步骤比较繁琐, 依旧参考 &lt;a href=&quot;https://github.com/nfarina/homebridge/wiki/Running-HomeBridge-on-a-Raspberry-Pi&quot;&gt;Running HomeBridge on a Raspberry Pi&lt;/a&gt;.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 在命令后添加 --registry=http://r.cnpmjs.org 使用国内 npm 镜像代理 sudo npm install -g --unsafe-perm homebridge hap-nodejs node-gyp --registry=http://r.cnpmjs.org cd /usr/lib/node_modules/homebridge/ sudo npm install --unsafe-perm bignum --registry=http://r.cnpmjs.org cd /usr/lib/node_modules/hap-nodejs/node_modules/mdns sudo node-gyp BUILDTYPE=Release rebuild &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;这时候可以输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;homebridge&lt;/code&gt; 测试能否正常运行 homebridge, 如果一切顺利的话, 能看到 homebridge 一直运行且没有报错, 打开手机的家庭 app 添加配件就能看到 homebridge.&lt;/p&gt; &lt;h2 id=&quot;安装-homebridge-yeelight&quot;&gt;安装 homebridge-yeelight&lt;/h2&gt; &lt;p&gt;记得打开 yeelight 的极客模式, 最新版本 (0.0.1.4) 的 &lt;a href=&quot;https://www.npmjs.com/package/homebridge-yeelight&quot;&gt;homebridge-yeelight&lt;/a&gt; 已经不需要更改 config.json 了, 因此直接输入以下代码就完成了配置, 能在手机里添加台灯了.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install -g homebridge-yeelight --registry=http://r.cnpmjs.org homebridge &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;开机启动&quot;&gt;开机启动&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nfarina/homebridge/wiki/Running-HomeBridge-on-a-Raspberry-Pi&quot;&gt;Running HomeBridge on a Raspberry Pi&lt;/a&gt; 上给出的添加启动项实在是太繁琐了, 我甚至因为这一步没弄明白重新刷了次机, 还顺便搞懂了.bashrc 和 rc.local 有什么区别. 事实上, 树莓派文档 &lt;a href=&quot;https://www.raspberrypi.org/documentation/linux/usage/cron.md&quot;&gt;Scheduling tasks with Cron&lt;/a&gt; 给出的方法是最简单且方便以后配置别的程序的.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 先安装 cron sudo apt-get install gnome-schedule &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;然后配置 cron.&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;在最下方添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;@reboot homebridge &amp;amp;&lt;/code&gt; 即可完成开机启动 homebridge 的配置. 再多嘴一句, cron 这个命令非常好用, 在 system tools 里有 GUI 界面, 还能让树莓派完成每周日运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get update sudo apt-get update&lt;/code&gt; 这样的定时任务.&lt;/p&gt; &lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/linux/usage/cron.md&quot;&gt;Scheduling tasks with Cron - Raspberry Pi Documentation (树莓派官方的资料真的非常友好)&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/&quot;&gt;Raspberry Pi Documentation&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://sspai.com/36617&quot;&gt;借助树莓派与HomeBridge，将 YeeLight 彩光灯接入 Apple HomeKit - 少数派&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://bbs.xiaomi.cn/t-13198850&quot;&gt;小米网关接入Homekit完整教程，声控家中设备! - 小米社区官方论坛&lt;/a&gt;&lt;/p&gt; </description><pubDate>Fri, 06 Jan 2017 00:08:00 +0000</pubDate><link>http://localhost:4000/rpi-homekit-yeelight.html</link><guid isPermaLink="true">http://localhost:4000/rpi-homekit-yeelight.html</guid> </item> <item><title>期末复习效率指南</title><description>&lt;ul id=&quot;markdown-toc&quot;&gt; &lt;li&gt;&lt;a href=&quot;#指南大纲&quot; id=&quot;markdown-toc-指南大纲&quot;&gt;指南大纲&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#内在动机驱动&quot; id=&quot;markdown-toc-内在动机驱动&quot;&gt;内在动机驱动&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#闷声发大财&quot; id=&quot;markdown-toc-闷声发大财&quot;&gt;闷声发大财&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#执行意图&quot; id=&quot;markdown-toc-执行意图&quot;&gt;执行意图&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#必要难度&quot; id=&quot;markdown-toc-必要难度&quot;&gt;必要难度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#组块化&quot; id=&quot;markdown-toc-组块化&quot;&gt;组块化&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#如何形成组块&quot; id=&quot;markdown-toc-如何形成组块&quot;&gt;如何形成组块&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#流程化&quot; id=&quot;markdown-toc-流程化&quot;&gt;流程化&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#支持我&quot; id=&quot;markdown-toc-支持我&quot;&gt;支持我&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#邮件订阅&quot; id=&quot;markdown-toc-邮件订阅&quot;&gt;邮件订阅&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;这三天研究了认知心理学，并打算将学得用于期末复习，因此有此指南。作为一个读者，目前我看到的学霸复习指南为我提供了不少建议，让我有许多收获，然而这些建议缺少理论支撑，且一般是按照不同学科分类给建议，缺少统一的体系。本指南以开放、开源、共享的黑客精神（请大家感受一下我对卖笔记、打广告这种事情的鄙夷），与各位读者分享、切磋心智技巧，鉴于我个人对心理学的认知还停留在门外汉层面，有许多不完善的地方请各位斧正。&lt;/p&gt; &lt;h2 id=&quot;指南大纲&quot;&gt;指南大纲&lt;/h2&gt; &lt;p&gt;主要分为两块，理论和流程，理论以认知心理学为主，流程是我总结出适用于当前读者的方法论。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;内在动机驱动&lt;/li&gt; &lt;li&gt;闷声发大财&lt;/li&gt; &lt;li&gt;执行意图&lt;/li&gt; &lt;li&gt;必要难度&lt;/li&gt; &lt;li&gt;组块化&lt;/li&gt; &lt;li&gt;如何形成组块&lt;/li&gt; &lt;li&gt;流程化&lt;/li&gt; &lt;li&gt;参考资料&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;内在动机驱动&quot;&gt;内在动机驱动&lt;/h2&gt; &lt;p&gt;永远保持好奇、永远在探索是自我驱动的唯一动力。&lt;/p&gt; &lt;p&gt;分数、名利和金钱这些外部动机仅仅是对探索结果的反馈。这些东西都是虚无的，拿到了很高的分数、受到了赞扬、赚到了很多钱后，但又能做什么呢？无非就是受到了激励、帮助，然后继续探索。&lt;/p&gt; &lt;p&gt;我个人所秉持的价值观就是黑客精神，黑客的驱动力就是对万物保持强烈的好奇心，想去探索根源，就像探索程序背后的源代码一样。&lt;/p&gt; &lt;p&gt;Y Combinator 的创始人 Paul Graham 写了一本书 &lt;a href=&quot;https://book.douban.com/subject/6021440/&quot;&gt;《黑客与画家》&lt;/a&gt;，讲述了他认知的黑客文化、创业和艺术，推荐想了解黑客的内在动机的读者阅读。&lt;/p&gt; &lt;h2 id=&quot;闷声发大财&quot;&gt;闷声发大财&lt;/h2&gt; &lt;p&gt;参考 &lt;a href=&quot;http://www.ted.com/talks/derek_sivers_keep_your_goals_to_yourself&quot;&gt;Derek Sivers&lt;/a&gt; 的 TED 演讲，心理学研究已经表明，当自己设定目标后，要管住自己的嘴，当我们告诉别人「我要学习编程」的时候，这种告诉别人目标带来的满足感会欺骗自己已经完成了该目标，在我们想分享目标的时候，可以有两种策略，&lt;del&gt;其中第二种策略无形中验证了中国一句古话&lt;/del&gt;：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;说没有满足感的目标，例如，我要开始学习编程，每周编程10小时以上，如果不能完成，我就发100块红包。&lt;/li&gt; &lt;li&gt;把目标完成了之后再说出来，闷声发大财。&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;执行意图&quot;&gt;执行意图&lt;/h2&gt; &lt;p&gt;阳志平在 &lt;a href=&quot;http://www.yangzhiping.com/psy/YangQ&amp;amp;A-Implementation-intention.html&quot;&gt;行动派&lt;/a&gt; 和 &lt;a href=&quot;http://www.yangzhiping.com/psy/implementation-intentions.html&quot;&gt;执行意图&lt;/a&gt; 中如此阐述执行意图，「执行意图不鼓励模糊抽象的目标，而是鼓励你将目标拆解为具体步骤，用具体的时间地点引发一个动作」 。&lt;/p&gt; &lt;p&gt;明确执行意图，一种方法是使用 if-then。这个策略有点像设定触发器以让心智用最低成本（而不是决策成本）达到行动的目的，例如我可以设定「如果到了早上8点半，我就要起床刷牙」，这样我就不用到了早上8点半开始挣扎自己是不是应该起床（决策）；还可以这样设定：「起床以后，如果我今天高兴，我就去复习10个近期单词，如果我不高兴，我就去看阳志平的博客」。&lt;/p&gt; &lt;p&gt;另一种明确执行意图的方法是 turn-product-into-process。参照 &lt;a href=&quot;https://www.coursera.org/learn/learning-how-to-learn/lecture/wTEpf/surfs-up-process-versus-product&quot;&gt;Learning How to Learn&lt;/a&gt; 的拖延症章节，我们对自己日常任务往往是结果导向的，例如写完 Essay、复习功课，但这些结果往往就导致了我们的拖延，一是因为我们根本无法预测产出所需要的时间，最后往往是临阵磨枪，二是因为结果导向往往让我们很痛苦。因此，我们需要把结果导向的任务转换成过程导向的，例如把「完成效率指南任务」转换成「用2个番茄时间创作效率指南」，把「复习功课」转换成「用4个番茄时间整理 FA 脉络」，这样可以大大减少拖延的情况，也可以方便安排一天的时间。&lt;/p&gt; &lt;h2 id=&quot;必要难度&quot;&gt;必要难度&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;人们常通常认为，记得越快，就是学习效果越好。简而言之，存储越容易，提取就会越快。但是近些年，最新实验发现了与常识相反的结论：存储与提取负相关。——阳志平&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;心理学理论认为适当地增加自己记忆的难度可以方便日后提取，也就是俗话说的好记性不如烂笔头，这背后包含的种种成因暂不讨论，我猜测是因为增加难度可以让自我更专注、更容易进入心流状态。阳志平在其博客中总结了以下几点可行的必要难度：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;时间难度 不要在课上记笔记，而是把记笔记的时间推迟6小时左右。&lt;/li&gt; &lt;li&gt;地点难度 在不同的地方记忆，在图书馆看的内容，就回宿舍写笔记。&lt;/li&gt; &lt;li&gt;分时难度 把每个学科复习的时间打散，不是我一天要学这门课10小时，而是每天学2小时。&lt;/li&gt; &lt;li&gt;跨界难度 不同学科混在一起复习。&lt;/li&gt; &lt;li&gt;输出难度 想着法儿考验自己让自己运用知识，用费曼学习法、写文章、写博客、亲手实践。&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;组块化&quot;&gt;组块化&lt;/h2&gt; &lt;p&gt;我们的大脑有两种记忆方式，工作记忆和长时记忆。工作记忆时效短，但容易存储，就像电脑的内存，长时记忆时效长，但不容易存储，如同电脑的硬盘。但我们在复习一个个零散的概念时，有意识地把这些概念联系、组合起来，这就是组块化。组块化占用更少的工作记忆，使得大脑更容易将组块从工作记忆转移到长期记忆中。&lt;/p&gt; &lt;h2 id=&quot;如何形成组块&quot;&gt;如何形成组块&lt;/h2&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;形成总体概览（Big Picture）&lt;/p&gt; &lt;p&gt;组块的形成可以是从上至下的或者从下至上的，有意识地形成总体概览，就是从上至下的过程，它可以帮助我们更容易地发现各个小组块的联系。我们拿到一本书以后，先不要急着开始，而是先看目录，思考整本书在讲什么问题，自己最想知道哪个部分，这样我们在看书的时候，就能大概了解看到的部分在整本书里占的比重，是基础还是废话，是自己需要的还是不需要的，同时也能帮助我们提问，达到驱动自我的目的。以我手边的《设计心理学》为例，第一章日用品心理学是介绍，第二章是行为心理学，人们的行为背后有哪些规律，第三章讲的是记忆，前三章是心理学范畴的；第四章是现实生活中人受到的约束，第五章是人的差错是设计导致的，第六章讲设计思维及流程，这三章是设计领域的，第七章全球化设计，这章是商业。在看目录的时候，我就无意识地对章节进行了大致地分类（组块），组块的同时，我会不由自主地联系它们产生问题，心理学是怎么影响设计的？行为学是不是就对应了设计中 affordance（示能）的概念？设计流程的哪一步对应到心理学？这些问题又驱动我跳转到我感兴趣的章节（从头到尾按顺序看是一件很痛苦的事情），逐渐地驱动我读完这本书。 &lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNbRwgw1fatte25u6hj31hc0u0aep.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;分解概念&lt;/p&gt; &lt;p&gt;在形成总体概览后，我们就可以着手那些细碎的知识点或者章节，要时刻注意把眼前的知识点打散。比如说在《设计心理学》第一章里，可分解出以下的概念：&lt;/p&gt; &lt;p&gt;好设计的特征&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; * 可视性 * 易读性 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;设计的分类&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; * 工业设计 * 交互设计 * 体验设计 * 以人为本的设计 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;交互设计的原则&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; * 示能 * 意符 * 映射 * 反馈 * 概念模型 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;联系概念&lt;/p&gt; &lt;p&gt;把打散的概念相互联系，这是一种自下而上的组块化。《设计心理学》中，作者举例告诉我们什么是好的设计（包含可视性和易读性的设计），比较了各个类别的设计的区别，用对话的形式列出了示能和意符的联系，这些是书中已经有的联系。&lt;/p&gt; &lt;p&gt;我们头脑中已有知识也可以和这些概念发生联系，例如示能的概念我会联想到原研哉在《设计中的设计》里深泽直人设计的伞架，在地上挖了个孔眼，直截了当地说明了这个孔眼可用来插伞，这是示能在室内设计中的体现；同样的，为什么《写给大家看的设计书》里强调文本对齐的重要性？因为对齐也是一种示能。&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;概念模型化&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNbRwgw1fattgw2ktzj30go0d075o.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;把脑中的概念联系在一起后，继续抽象成模型，我在高中的时候无意中有想到几个抽象模型，能量守恒、动量守恒、牛顿第一定律（物体在没有外力的情况下保持匀速运动）、酸碱中和反应可以总结为物质世界的均衡模型（物质世界倾向于朝无运动的方向发展）。&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;模型连通&lt;/p&gt; &lt;p&gt;模型和模型之间当然可以连通，我刚刚提到的物质世界均衡模型其实很类似经济学中的均衡（事实上均衡正是阿尔弗雷德·马歇尔从物理学引入的），所以我头脑中的经济学供需模型其实和物质世界的均衡模型打通了，当然，这时候还能引入博弈论的纳什均衡，这就又抽象为人类活动及物质的均衡模型。这种跨学科的思维模型非常重要，可以参考芒格写的 &lt;a href=&quot;https://book.douban.com/subject/5346110/&quot;&gt; 《穷查理宝典》&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;刻意练习&lt;/p&gt; &lt;p&gt;人的时间那么宝贵，练习时间必然要花在刀刃上。高三的时候的复习，就是来来回回地翻教材，翻的都是自己知道的东西，其实这是最最低效的方法（我到现在也无法理解为什么学校要浪费我这么多时间）。刻意练习就是只练习困难的部分，能有效地防止我们有完成幻觉（illusion of competence），我们看完两页书以后，常会不由自主地赞美自己用功复习，然而实际上我们还是没有理解这些概念，只有用课后练习、费曼学习法、写作等方法测试自己哪里没有学到位才能帮助我们检验、内化知识。&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;流程化&quot;&gt;流程化&lt;/h2&gt; &lt;p&gt;流程化就是让理论和方法落地和打包的过程，这里给出我自己整理出的大致流程。这里以我认为世界上最无聊的学科 Financial Accounting 为例。&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;探索学科以达到自我驱动&lt;/p&gt; &lt;p&gt;为了打起所甚无几的对 Accounting 的兴趣，先去知乎搜索一下，发现了这个不错的问题：&lt;a href=&quot;https://www.zhihu.com/question/20688855&quot;&gt;人们为什么选会计专业？真的有喜欢会计的人吗？&lt;/a&gt;&lt;/p&gt; &lt;p&gt;我又从 TED 的 &lt;a href=&quot;http://www.ted.com/topics/finance&quot;&gt;Finance&lt;/a&gt; 话题下找了一个有趣的演讲：&lt;a href=&quot;http://www.ted.com/talks/william_black_how_to_rob_a_bank_from_the_inside_that_is&quot;&gt;William Black: How to rob a bank (from the inside, that is)&lt;/a&gt;&lt;/p&gt; &lt;p&gt;最后我在 YC 创业课上找了这个： &lt;a href=&quot;http://startupclass.club/steps/18&quot;&gt;法律与财务基础 - YC创业课&lt;/a&gt;，这些资料我意识到财务是创立和了解一家公司的基础，好的，我似乎有那么一点点兴趣了。&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;用 WOOP 方法达到自我约束&lt;/p&gt; &lt;p&gt;Wish（期望）：了解财务会计的基本概念并能熟练运用。&lt;/p&gt; &lt;p&gt;Outcome（最理想的结果）：能独立完成 Past Exam 中的财务报表，能正确回答课本的问题。&lt;/p&gt; &lt;p&gt;Obstacle（最可能阻碍计划完成的因素有哪些）：对财务没有任何兴趣&lt;/p&gt; &lt;p&gt;Plan（执行意图）：如果我抱怨财务会计无聊，就去研究一家上市公司的财务报表。每天至少花6个番茄时间用于梳理财务会计的概念，4个番茄时间用于刻意练习财务会计。&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;组块化&lt;/p&gt; &lt;p&gt;看了一下 Module Outline，可以发现 FA 的概念极为零碎，但又基本在两个报表之下：Balance Sheet（第三周到第六周），Cash Flow Statements（第七周到第九周）。头尾三周介绍的主要是琐碎的概念。&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;设定必要难度、刻意练习&lt;/p&gt; &lt;p&gt;分时复习：每天只复习6个番茄时间，而不是一天看完。&lt;/p&gt; &lt;p&gt;跨学科复习：6个番茄时间在上下午完成，空闲时间用于复习其他学科。&lt;/p&gt; &lt;p&gt;刻意练习：看完教科书的章节后6小时做练习、每天晚上抽时间写会计笔记。&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/openmintalk.html&quot;&gt;读书与心智 - 阳志平的网志&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/live002.yangtalk.html&quot;&gt;读书十二问 - 阳志平的网志&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/YangQ&amp;amp;A-Implementation-intention.html&quot;&gt;行动派 - 阳志平的网志&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/implementation-intentions.html&quot;&gt;心智工具箱（4）：执行意图 - 阳志平的网志&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/reading-2015.html&quot;&gt;冷读热读：读书九问 - 阳志平的网志&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.yangzhiping.com/psy/YangQ&amp;amp;A-SelfDetermination.html&quot;&gt;如何成为内在动机驱使的人？ - 阳志平的网志&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/learning-how-to-learn/home/week/2&quot;&gt;Coursera - Learning How to Learn Week 2&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22574669?refer=hackyourself&quot;&gt;重启学习系统，做个知识炼金术士&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22647481?refer=hackyourself&quot;&gt;知识炼金术士行动指南 1.0&lt;/a&gt;&lt;/p&gt; &lt;h2 id=&quot;支持我&quot;&gt;支持我&lt;/h2&gt; &lt;p&gt;在之后的几天，我会以我人生最大的难关——复习 Financial Accounting——为范例，给出我复习 FA 的具体的笔记（我认为我到死都不会忘记被 FA 支配的恐惧）。如果反馈良好，我会着手 Work and Society 等其他学科的笔记。&lt;/p&gt; &lt;p&gt;如果你非常愿意&lt;strong&gt;无回报&lt;/strong&gt;地支持我，微信扫码捐助，金额随意。 &lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNbRwgw1fattjmu5lvj30v20kv76l.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;邮件订阅&quot;&gt;邮件订阅&lt;/h2&gt; &lt;p&gt;本文系 HackUndergraduate 系列的文章，如果你希望第一时间使用邮箱获得 HackUndergraduate 系列新文章，在下方输入你的邮箱地址即可。&lt;/p&gt; &lt;form style=&quot;border:1px solid #ccc;padding:3px;text-align:center;&quot; action=&quot;https://tinyletter.com/HackUndergraduate&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/HackUndergraduate', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;&lt;p&gt;&lt;label for=&quot;tlemail&quot;&gt;Enter your email address&lt;/label&gt;&lt;/p&gt;&lt;p&gt;&lt;input type=&quot;text&quot; style=&quot;width:140px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; /&gt;&lt;/p&gt;&lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot; /&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;&lt;p&gt;&lt;a href=&quot;https://tinyletter.com&quot; target=&quot;_blank&quot;&gt;powered by TinyLetter&lt;/a&gt;&lt;/p&gt;&lt;/form&gt; </description><pubDate>Sat, 17 Dec 2016 15:31:00 +0000</pubDate><link>http://localhost:4000/posts/end-term-gateway/</link><guid isPermaLink="true">http://localhost:4000/posts/end-term-gateway/</guid> </item> </channel> </rss>
